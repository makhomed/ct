#!/usr/bin/python3 -u

import datetime
import os
import os.path
import sys
import subprocess
import time
import uuid


def to_bytes(obj):
    if obj is None:
        return None
    if isinstance(obj, bytes):
        return obj
    elif isinstance(obj, int):
        return str(obj).encode('utf-8')
    elif isinstance(obj, str):
        return obj.encode('utf-8')
    else:
        raise TypeError(f"obj must be a str or bytes type, not '{type(obj)}'")


def to_text(obj):
    if isinstance(obj, str):
        return obj
    elif isinstance(obj, bytes):
        return obj.decode('utf-8')
    else:
        raise TypeError(f"obj must be a bytes or str type, not '{type(obj)}'")


def run(command, *, stdin=None, can_fail=False):
    command = ["/bin/bash", "-c", command]
    p = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    try:
        LOCAL_COMMAND_TIMEOUT = 600
        stdout_bytes, stderr_bytes = p.communicate(to_bytes(stdin), LOCAL_COMMAND_TIMEOUT)
    except subprocess.TimeoutExpired:
        p.kill()
        stdout_bytes, stderr_bytes = p.communicate()
    result = Result(p.returncode, stdout_bytes, stderr_bytes)
    if result or can_fail:
        return result
    else:
        raise RuntimeError(f"Unexpected returncode '{p.returncode}'\ncommand: {command}\nstdout: {stdout_bytes}\nstderr: {stderr_bytes}")


class Result:
    def __init__(self, returncode, stdout_bytes, stderr_bytes):
        self.returncode = returncode
        self.stdout_bytes = stdout_bytes
        self.stderr_bytes = stderr_bytes
        self.stdout_raw = stdout_bytes.decode(encoding="utf-8", errors="replace")
        self.stderr_raw = stderr_bytes.decode(encoding="utf-8", errors="replace")
        self.stdout = self.stdout_raw.strip()
        self.stderr = self.stderr_raw.strip()

    def __bool__(self):
        return self.returncode == 0


class Containers:
    def __init__(self):
        self.names = dict()
        self.read_containers()
        self.read_enabled_containers()
        self.read_running_containers()
        self.read_aliases()
        self.read_ips()
        self.read_hostnames()

    def hr(self, size):
        size = int(size)
        if size <= 1024:
            return f"{size:4d} bytes"
        if size <= 1024*1024:
            return f"{size/1024:7.2f} KiB"
        if size <= 1024*1024*1024:
            return f"{size/1024/1024:7.2f} MiB"
        if size <= 1024*1024*1024*1024:
            return f"{size/1024/1024/1024:7.2f} GiB"
        if size <= 1024*1024*1024*1024*1024:
            return f"{size/1024/1024/1024/1024:7.2f} TiB"
        if size <= 1024*1024*1024*1024*1024*1024:
            return f"{size/1024/1024/1024/1024/1024:7.2f} PiB"
        if size <= 1024*1024*1024*1024*1024*1024*1024:
            return f"{size/1024/1024/1024/1024/1024/1024:7.2f} EiB"
        if size <= 1024*1024*1024*1024*1024*1024*1024*1024:
            return f"{size/1024/1024/1024/1024/1024/1024/1024:7.2f} ZiB"
        if size <= 1024*1024*1024*1024*1024*1024*1024*1024*1024:
            return f"{size/1024/1024/1024/1024/1024/1024/1024/1024:7.2f} YiB"

    def read_containers(self):
        self.containers = list()
        self.used = dict()
        self.refer = dict()
        stdout = run("zfs list -H -p -o name,used,refer -r tank/containers").stdout
        for line in stdout.splitlines():
            name, used, refer = line.split('\t')
            if name == "tank/containers":
                continue
            container = name.split('/')[-1]
            if container in self.names:
                raise RuntimeError(f'Container {container} already defined as alias')
            self.names[container] = container
            self.containers.append(container)
            self.used[container] = self.hr(used)
            self.refer[container] = self.hr(refer)
        self.containers.sort(key=lambda x: int(x))

    def read_enabled_containers(self):
        self.enabled_containers = set()
        for container in self.containers:
            if os.path.isfile(f"/etc/systemd/system/machines.target.wants/systemd-nspawn@{container}.service"):
                self.enabled_containers.add(container)

    def read_running_containers(self):
        self.running_containers = set()
        lines = run("machinectl list --no-legend --no-pager").stdout.splitlines()
        for line in lines:
            container = line.split()[0]
            self.running_containers.add(container)

    def read_aliases(self):
        self.alias_to_container = dict()
        self.container_to_alias = dict()
        for container in self.containers:
            self.container_to_alias[container] = ''
            if os.path.isfile(f'/tank/containers/{container}/alias'):
                with open(f'/tank/containers/{container}/alias') as alias_file:
                    alias = alias_file.read().strip()
                    if alias in self.names:
                        raise RuntimeError(f'Alias {alias} already defined as container name')
                    self.names[alias] = container
                    self.alias_to_container[alias] = container
                    self.container_to_alias[container] = alias

    def read_ips(self):
        self.ips = dict()
        for container in self.containers:
            self.ips[container] = list()
            if os.path.isfile(f"/tank/containers/{container}/root/etc/systemd/network/00-host0.network"):
                with open(f"/tank/containers/{container}/root/etc/systemd/network/00-host0.network") as ip_file:
                    lines = ip_file.read().strip().splitlines()
                    for line in lines:
                        if line.startswith('Address='):
                            ip = line.split('=')[1].split('/')[0]
                            self.ips[container].append(ip)

    def read_hostnames(self):
        self.hostnames = dict()
        for container in self.containers:
            self.hostnames[container] = ''
            if os.path.isfile(f"/tank/containers/{container}/root/etc/hostname"):
                with open(f"/tank/containers/{container}/root/etc/hostname") as hostname_file:
                    hostname = hostname_file.read().strip()
                    self.hostnames[container] = hostname

    def list_containers(self):
        if len(self.containers) == 0:
            print()
            print("    no containers exists")
            print()
            return
        aliases = list()
        for container in self.containers:
            if container in self.container_to_alias:
                alias = self.container_to_alias[container]
                if alias == '':
                    aliases.append('-')
                else:
                    aliases.append(alias)
            else:
                aliases.append('-')
        ips = list()
        for container in self.containers:
            if len(self.ips[container]) > 0:
                ips.append(self.ips[container][0])
            else:
                ips.append('')
        max_container_name_len = len(max(self.containers, key=len))
        max_alias_name_len = len(max(aliases, key=len))
        max_ip_len = len(max(ips, key=len))

        print()
        used =  "      USED"
        refer = "     REFER"
        enabled = "ENABLED"
        running = "RUNNING"
        container = "CT"
        alias = "ALIAS"
        ip = "IP_ADDRESS"
        hostname = "HOSTNAME"
        print(f"{used}  {refer}  {enabled}  {running}  {container:>{max_container_name_len}}  {alias:{max_alias_name_len}}  {ip:>{max_ip_len}}  {hostname}")
        print()

        for container, alias, ip in zip(self.containers, aliases, ips):
            if container in self.enabled_containers:
                enabled = 'enabled'
            else:
                enabled = '-------'
            if container in self.running_containers:
                running = 'running'
            else:
                running = '-------'
            hostname = self.hostnames[container]
            used = self.used[container]
            refer = self.refer[container]
            print(f"{used}  {refer}  {enabled}  {running}  {container:>{max_container_name_len}}  {alias:{max_alias_name_len}}  {ip:>{max_ip_len}}  {hostname}")
        print()

    def read_bridge_ip(self):
        if not os.path.isfile("/etc/systemd/network/venet0.network"):
            raise RuntimeError("Not found bridge interface file /etc/systemd/network/venet0.network")
        with open("/etc/systemd/network/venet0.network") as venet0_file:
            lines = venet0_file.read().strip().splitlines()
            for line in lines:
                if line.startswith('Address='):
                    ip = line.split('=')[1].split('/')[0]
                    return ip

    def write_network_config(self, container):
        bridge_ip = self.read_bridge_ip()
        stat = os.stat(f"/tank/containers/{container}/root/etc/passwd")
        if not os.path.isdir(f"/tank/containers/{container}/root/etc/systemd/network"):
            run(f"mkdir -p /tank/containers/{container}/root/etc/systemd/network")
            os.chown(f"/tank/containers/{container}/root/etc/systemd/network", stat.st_uid, stat.st_gid)
            os.chmod(f"/tank/containers/{container}/root/etc/systemd/network", 0o755)
        bridge_ip = self.read_bridge_ip()
        subnet = bridge_ip.rsplit('.', 1)[0]
        ip = f"{subnet}.{container}"
        with open(f"/tank/containers/{container}/root/etc/systemd/network/00-host0.network", "w") as config_file:
            config_file.write("[Match]\n")
            config_file.write("Name=host0\n")
            config_file.write("\n")
            config_file.write("[Network]\n")
            config_file.write(f"Address={ip}/24\n")
            config_file.write(f"Gateway={bridge_ip}\n")
            config_file.write(f"LinkLocalAddressing=no\n")
        os.chown(f"/tank/containers/{container}/root/etc/systemd/network/00-host0.network", stat.st_uid, stat.st_gid)
        os.chmod(f"/tank/containers/{container}/root/etc/systemd/network/00-host0.network", 0o644)

    def write_nspawn_config(self, container):
        if not os.path.isdir("/etc/systemd/nspawn"):
            run("mkdir -p /etc/systemd/nspawn")
        with open(f"/etc/systemd/nspawn/{container}.nspawn", "w") as nspawn_file:
            nspawn_file.write("[Exec]\n")
            nspawn_file.write("ResolvConf=copy-host\n")
            nspawn_file.write("LimitNOFILE=infinity\n")
            nspawn_file.write("LimitNICE=40\n")
            nspawn_file.write("\n")
            nspawn_file.write("[Network]\n")
            nspawn_file.write("Bridge=venet0\n")

    def create_container(self, container):
        assert int(container) >= 1
        assert int(container) <= 253
        container = str(int(container))
        if container in self.containers:
            raise RuntimeError(f"Container {container} already exists")
        if container in self.alias_to_container:
            raise RuntimeError(f"Container name {container} already used as alias")
        run(f"zfs create -o recordsize=4K tank/containers/{container}")
        run(f"mkdir -p /tank/containers/{container}/root")
        packages = """
                centos-release systemd passwd yum dnf-plugins-core vim-enhanced
                bash bash-completion less psmisc openssh-server iputils iproute
                net-tools openssh-clients mc tar epel-release htop systemd-networkd
                rootfiles rsyslog cronie man
                """
        packages = " ".join((" ".join(packages.splitlines())).split())
        run(f"yum -y --releasever=8 --installroot=/tank/containers/{container}/root install {packages}")
        self.write_network_config(container)
        self.write_nspawn_config(container)
        run(f"ln -s /tank/containers/{container}/root /var/lib/machines/{container}")
        run(f"machinectl enable {container}")
        run(f"machinectl start {container}")
        time.sleep(1)
        run(f"systemd-run --machine {container} /usr/bin/timedatectl set-timezone Europe/Kiev")
        run(f"systemd-run --machine {container} /usr/bin/localectl set-locale en_US.UTF-8")

    def destroy_container(self, container):
        if container not in self.containers:
            raise RuntimeError(f"Can't destroy unknown container {container}")
        if container in self.running_containers:
            raise RuntimeError(f"Can't destroy running container {container}")
        if container in self.enabled_containers:
            raise RuntimeError(f"Can't destroy enabled container {container}")
        alias = self.container_to_alias[container]
        hostname = self.hostnames[container]
        ips = " ".join(self.ips[container])
        print()
        print(f"Container : {container}")
        print(f"Alias     : {alias}")
        print(f"IPs       : {ips}")
        print(f"Hostname  : {hostname}")
        print()
        s = input(f"DESTROY CONTAINER {container} ?\n\nPlease enter word 'DESTROY': ")
        if s != 'DESTROY':
            sys.exit(1)
        run(f"rm -f /var/lib/machines/{container}")
        run(f"rm -f /etc/systemd/nspawn/{container}.nspawn")
        run(f"zfs destroy -r tank/containers/{container}")

    def rename_container(self, old_container, new_container):
        if old_container not in self.containers:
            raise RuntimeError(f"Can't rename not existing container {old_container}")
        if new_container in self.containers:
            raise RuntimeError(f"Can't rename to existing container {new_container}")
        if old_container in self.running_containers:
            raise RuntimeError(f"Can't rename running container {old_container}")
        if old_container in self.enabled_containers:
            run(f"machinectl disable {old_container}")
        run(f"zfs rename tank/containers/{old_container} tank/containers/{new_container}")
        run(f"mv /etc/systemd/nspawn/{old_container}.nspawn /etc/systemd/nspawn/{new_container}.nspawn")
        run(f"rm -f /var/lib/machines/{old_container}")
        run(f"ln -s /tank/containers/{new_container}/root /var/lib/machines/{new_container}")
        self.write_network_config(new_container)
        if old_container in self.enabled_containers:
            run(f"machinectl enable {new_container}")

    def clone_container(self, old_container, new_container):
        if old_container not in self.containers:
            raise RuntimeError(f"Can't clone not existing container {old_container}")
        if new_container in self.containers:
            raise RuntimeError(f"Can't clone to existing container {new_container}")
        if old_container in self.running_containers:
            raise RuntimeError(f"Can't clone running container {old_container}")

        snapshot_name = datetime.datetime.now().strftime('ct.clone.%Y-%m-%d.%H:%M:%S.tmp.'+str(uuid.uuid4()))
        original_snapshot = f"tank/containers/{old_container}@{snapshot_name}"
        clone_filesystem = f"tank/containers/{new_container}"
        clone_snapshot = f"tank/containers/{new_container}@{snapshot_name}"
        run(f"zfs snapshot {original_snapshot}")
        run(f"zfs send --replicate --raw {original_snapshot} | zfs receive -F {clone_filesystem}")
        run(f"zfs destroy {original_snapshot}")
        run(f"zfs destroy {clone_snapshot}")
        self.write_network_config(new_container)
        self.write_nspawn_config(new_container)
        run(f"ln -s /tank/containers/{new_container}/root /var/lib/machines/{new_container}")

        if self.container_to_alias[old_container]:
            self.write_alias(new_container, "cloned-" + self.container_to_alias[old_container])
        if self.hostnames[old_container]:
            self.write_hostname(new_container, "cloned-" + self.hostnames[old_container])
        if old_container in self.enabled_containers:
            run(f"machinectl enable {new_container}")

    def write_alias(self, container, alias):
        with open(f'/tank/containers/{container}/alias', "w") as alias_file:
            alias_file.write(alias.strip()+'\n')

    def write_hostname(self, container, hostname):
        if container in self.running_containers:
            run(f"systemd-run --machine {container} /usr/bin/hostnamectl set-hostname {hostname}")
        else:
            with open(f"/tank/containers/{container}/root/etc/hostname", "w") as hostname_file:
                hostname_file.write(hostname.strip()+'\n')
            stat = os.stat(f"/tank/containers/{container}/root/etc/passwd")
            os.chown(f"/tank/containers/{container}/root/etc/hostname", stat.st_uid, stat.st_gid)
            os.chmod(f"/tank/containers/{container}/root/etc/hostname", 0o644)

    def write_authorized_keys(self, container, filename):
        if not os.path.isfile(filename):
            raise RuntimeError(f"Not found authorized_keys file {filename}")
        with open(filename) as public_keys_file:
            public_keys = public_keys_file.read()
        stat = os.stat(f"/tank/containers/{container}/root/etc/passwd")
        if not os.path.isdir(f"/tank/containers/{container}/root/root/.ssh"):
            run(f"mkdir -p /tank/containers/{container}/root/root/.ssh")
            os.chown(f"/tank/containers/{container}/root/root/.ssh", stat.st_uid, stat.st_gid)
            os.chmod(f"/tank/containers/{container}/root/root/.ssh", 0o700)
        with open(f"/tank/containers/{container}/root/root/.ssh/authorized_keys", "w") as authorized_keys_file:
            authorized_keys_file.write(public_keys)
        os.chown(f"/tank/containers/{container}/root/root/.ssh/authorized_keys", stat.st_uid, stat.st_gid)
        os.chmod(f"/tank/containers/{container}/root/root/.ssh/authorized_keys", 0o600)

    def manage(self, container, command, argument):
        if command == 'set-alias':
            self.write_alias(container, argument)
        elif command == 'set-hostname':
            self.write_hostname(container, argument)
        elif command == 'set-authorized_keys':
            self.write_authorized_keys(container, argument)
        else:
            self.usage()

    def usage(self):
        print()
        print("usage:")
        print()
        print("    ct")
        print("    ct CTID")
        print()
        print("    ct create CTID")
        print("    ct destroy CTID")
        print()
        print("    ct enable CTID")
        print("    ct disable CTID")
        print()
        print("    ct start CTID")
        print("    ct stop CTID")
        print("    ct r[estart] CTID")
        print()
        print("    ct status CTID")
        print("    ct show CTID")
        print()
        print("    ct rename OLDID NEWID")
        print("    ct clone OLDID NEWID")
        print()
        print("    ct m[anage] CTID set-alias <alias>")
        print("    ct m[anage] CTID set-hostname <hostname>")
        print("    ct m[anage] CTID set-authorized_keys <filename>")
        print()


    def start(self, container):
        if container not in self.running_containers:
            run(f"machinectl start {container}")
        stopped = True
        while stopped:
            self.read_running_containers()
            if container in self.running_containers:
                stopped = False
            else:
                time.sleep(0.1)

    def stop(self, container):
        if container in self.running_containers:
            run(f"machinectl stop {container}")
        running = True
        while running:
            self.read_running_containers()
            if container not in self.running_containers:
                running = False
            else:
                time.sleep(0.1)

    def restart(self, container):
        self.stop(container)
        self.start(container)

    def run(self):
        if len(sys.argv) == 1:
            self.list_containers()
        elif len(sys.argv) == 2 and sys.argv[1] in self.names:
            os.execvp('machinectl', ['machinectl', '-q', '--setenv=SHELL=/bin/bash', 'shell', self.names[sys.argv[1]]])
        elif len(sys.argv) == 3 and sys.argv[1] in ['status', 'show', 'enable', 'disable'] and sys.argv[2] in self.names:
            os.execvp('machinectl', ['machinectl', sys.argv[1], self.names[sys.argv[2]]])
        elif len(sys.argv) == 3 and sys.argv[1] == 'start' and sys.argv[2] in self.names:
            container = self.names[sys.argv[2]]
            self.start(container)
        elif len(sys.argv) == 3 and sys.argv[1] == 'stop' and sys.argv[2] in self.names:
            container = self.names[sys.argv[2]]
            self.stop(container)
        elif len(sys.argv) == 3 and (sys.argv[1] == 'restart' or sys.argv[1] == 'r') and sys.argv[2] in self.names:
            container = self.names[sys.argv[2]]
            self.restart(container)
        elif len(sys.argv) == 3 and sys.argv[1] == 'create':
            container = sys.argv[2]
            self.create_container(container)
        elif len(sys.argv) == 3 and sys.argv[1] == 'destroy':
            container = sys.argv[2]
            self.destroy_container(container)
        elif len(sys.argv) == 4 and sys.argv[1] == 'rename':
            old_container = sys.argv[2]
            new_container = sys.argv[3]
            self.rename_container(old_container, new_container)
        elif len(sys.argv) == 4 and sys.argv[1] == 'clone':
            old_container = sys.argv[2]
            new_container = sys.argv[3]
            self.clone_container(old_container, new_container)
        elif len(sys.argv) == 5 and (sys.argv[1] == 'manage' or sys.argv[1] == 'm') and sys.argv[2] in self.names:
            container = self.names[sys.argv[2]]
            command = sys.argv[3]
            argument = sys.argv[4]
            self.manage(container, command, argument)
        else:
            self.usage()


def main():
    Containers().run()


if __name__ == '__main__':
    main()
